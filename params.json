{"name":"Buildxpages","tagline":"Tools for Building XPages Automatically","body":"BuildXPages\r\n===========\r\n\r\nThis project is a collection of tools which are useful in the case of building XPages applications using a Continous Integration server like Jenkins.\r\n\r\n* Augmented 'Headless' designer plugin to allow better feedback \r\n* Ant library of common tasks that are useful when building XPages apps\r\n* Jenkins plugin to use build Stpes\r\n\r\nUsing the Ant Library\r\n---------------------\r\n\r\nIntro to Ant\r\n\r\nIf you don't know about apache ant, it is basically a tool to define steps in a process and execute them! This is very handy for deployment steps etc.\r\n\r\nYou have a whole bunch of standard tasks which can be anything from copying a file, to compiling some code, jarring it up, running a process whatever.\r\nYou can also make your own tasks and supply them as an ant library which is what I have done here.\r\n\r\nThe basics of ant, is that you create an xml file which is your build script. It is usually called 'build.xml' but it can be another name.\r\nWithin your build script, you define sub-routines which are called targets. Targets can depend on other targets, so if 'last' depends on 'middle', and 'middle' depends on 'first', when you tell ant to execute the 'last' target, it will actually run 'first' then 'middle' then 'last'.\r\n\r\nYour build script can define a default target to run in the case that you have not specified a target to run.\r\n\r\n\r\n### Tasks \r\n\r\n- buildnsf\r\n  builds an NSF by connecting to Domino Design with Headless Plugin    \r\n- copynsf\r\n  copies an NSF from the local filesystem to a server\r\n- deletensf\r\n  deletes an NSF from a server\r\n- settemplatenames\r\n  sets or clears the inheritfrom and ismaster template names of an NSF\r\n- scxd\r\n  sets or clears the single copy xpages design settings of an NSF\r\n- restarthttp\r\n  sends a 'restart task http' command to a domino server console\r\n- refreshdbdesign\r\n  refreshs the design of a database\r\n\r\n### Using the Library in an Ant Build Script\r\n\r\nThe BuildXPages library depends on the Java Native Access Library\r\nTo use the BuildXPages Library in an Ant Build script, you need to:\r\n\r\n1. Make the BuildXPagesAntLib.jar available to ant\r\n2. Make the Java Native Access jar available to ant\r\n3. Define in your build script that you want to use this library\r\n\r\nYou have a couple of options here, you can install the jars 'Once and for all', or configure on a project by project basis.\r\nYou probably want to do it project by project, this way you can include these libraries in your Source Code Management repository (Git, Mercurial etc.)\r\n\r\n##### Per Project Basis\r\n\r\nEasiest way is to create a 'lib' sub folder in your project, and put both BuildXPagesAntLib.jar and jna-4.1.0.jar in this folder\r\n\r\nThen your Build script needs to declare that it wants to use the libary, see the file buildTemplate.xml for the example.\r\n\r\n###### Running\r\n\r\nWhen you run your build script, you will need to include a -lib argument which defines the lib folder as a place to look for libraries.\r\n\r\ne.g. if we \r\n\r\nant -buildfile <yourBuildFile.xml> -lib lib <yourtarget>\r\n\r\n##### Once and for all\r\n\r\nInstall BuildXPagesAntLib.jar and jna-4.1.0.jar into either\r\n* ANT_HOME/lib\r\n* ${user.home}/.ant/lib\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}